# -*- coding: utf-8 -*-
"""library_management_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13DwmgDu00ULLXwrsWuW9XMfB3MobFU-f
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
# display is used in notebooks to render DataFrames as nice tables
from IPython.display import display

# --- Analysis Function 1: Full Inventory Visualization ---
def run_full_analysis(df):
    """
    Generates all the detailed summaries and visualizations for the book data.
    """
    print("\n" + "---" * 15)
    print("--- üìä Running Full Book Inventory Analysis ---")
    print("---" * 15)

    # --- Text Summary: Total Books in Each Genre ---
    print("\nüìö **Summary: Total Books in Each Genre** üìö")
    book_counts = df['Book_category'].value_counts()
    print(book_counts.to_string())
    print("---" * 15)

    # --- Visualization: Total Book Count by Genre ---
    print("\nGenerating chart: Total Books by Genre...")
    plt.style.use('seaborn-v0_8-whitegrid')
    plt.figure(figsize=(12, 10))
    book_counts.sort_values(ascending=False).plot(kind='bar', color=sns.color_palette('viridis', len(book_counts)))
    plt.title('Total Number of Unique Books by Genre', fontsize=16, fontweight='bold')
    plt.xlabel('Book Genre', fontsize=12)
    plt.ylabel('Number of Unique Book Titles', fontsize=12)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

    # --- Visualization: Stock Levels by Genre ---
    print("Generating chart: Total Stock by Genre...")
    stock_by_genre = df.groupby('Book_category')['Quantity'].sum().sort_values(ascending=True)
    plt.figure(figsize=(12, 10))
    stock_by_genre.plot(kind='barh', color=sns.color_palette('plasma', len(stock_by_genre)))
    plt.title('Total Stock Quantity by Genre', fontsize=16, fontweight='bold')
    plt.xlabel('Total Stock Quantity', fontsize=12)
    plt.ylabel('Book Genre', fontsize=12)
    plt.tight_layout()
    plt.show()
    print("\n--- Full Analysis Complete ---")


# --- Analysis Function 2: Missing Data Validation ---
def check_missing_data(df):
    """
    Checks for missing values and generates a text and visual report.
    """
    print("\n" + "---" * 15)
    print("--- ‚ö†Ô∏è Running Missing Data Validation ---")
    print("---" * 15)

    df_check = df.copy()
    initial_rows = len(df_check)
    df_check.dropna(subset=['Title'], inplace=True)
    rows_removed = initial_rows - len(df_check)
    if rows_removed > 0:
        print(f"Note: Temporarily ignored {rows_removed} row(s) with a missing 'Title' for this validation.")

    missing_data_counts = df_check.isnull().sum()
    total_missing = missing_data_counts.sum()

    if total_missing == 0:
        print("\n‚úÖ Success: No missing data found in the core columns!")
    else:
        print(f"\nAlert: Found a total of {total_missing} missing value(s) in the file.")
        print("-------------------------------------------------")
        print("Missing Data Report (per column):")
        print(missing_data_counts[missing_data_counts > 0])
        print("-------------------------------------------------")

        print("\nüìñ Books with missing data:")
        missing_rows = df_check[df_check.isnull().any(axis=1)]
        if not missing_rows.empty:
            display(missing_rows)
        else:
            print("No rows with missing data to display.")
    print("\n--- Data Validation Complete ---")


# --- Analysis Function 3: Financial Dashboard ---
def generate_financial_dashboard(df):
    """
    Analyzes the financial investment in the book collection.
    """
    print("\n" + "---" * 15)
    print("--- üí∞ Generating Collection Financial Dashboard ---")
    print("---" * 15)

    df_financial = df.copy()
    df_financial['Total_Value'] = df_financial['Price'] * df_financial['Quantity']
    category_financials = df_financial.groupby('Book_category')['Total_Value'].sum().sort_values(ascending=False)
    total_collection_value = category_financials.sum()

    print(f"Calculated total collection value: ${total_collection_value:,.2f}")

    plt.figure(figsize=(12, 14))
    sns.barplot(y=category_financials.index, x=category_financials.values, orient='h', palette='magma')
    plt.suptitle('Total Financial Value of Inventory by Category', fontsize=18)
    plt.figtext(0.5, 0.94, f'Total Collection Value: ${total_collection_value:,.2f}',
                ha='center', fontsize=14, style='italic')
    plt.xlabel('Total Value ($)', fontsize=12)
    plt.ylabel('Book Genre', fontsize=12)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()
    print("\n--- Financial Dashboard Complete ---")


# --- Analysis Function 4: Quick Stats Summary ---
def show_quick_stats(df):
    """
    Displays a high-level summary of the most important metrics.
    """
    print("\n" + "---" * 15)
    print("--- üìà Quick Stats Summary ---")
    print("---" * 15)

    total_books = len(df)
    unique_titles = df['Title'].nunique()
    total_stock = int(df['Quantity'].sum())
    total_value = (df['Price'] * df['Quantity']).sum()
    most_common_genre = df['Book_category'].mode()[0]
    avg_price = df['Price'].mean()
    avg_rating = df['Star_rating_numeric'].mean()

    print(f"Total Records Analyzed:     {total_books}")
    print(f"Number of Unique Titles:    {unique_titles}")
    print(f"Total Items in Stock:       {total_stock}")
    print(f"Most Common Genre:          {most_common_genre}")
    print(f"Average Book Price:         ${avg_price:.2f}")
    print(f"Average Star Rating:        {avg_rating:.2f} / 5.0")
    print(f"Total Collection Value:     ${total_value:,.2f}")
    print("---" * 15)


# --- MAIN EXECUTION BLOCK ---
if __name__ == '__main__':
    # Use the file path for your data
    file_path = '/content/newmergeddataset.csv'

    if not os.path.exists(file_path):
        print(f"‚ùå Error: The file '{file_path}' was not found.")
        print("Please make sure you have uploaded the file and the path is correct.")
    else:
        try:
            # --- Step 1: Load and Clean the Data ONCE ---
            print("Loading and preparing data, please wait...")
            df_raw = pd.read_csv(file_path, header=None, skiprows=1, on_bad_lines='skip')
            correct_columns = [
                'Title', 'Book_category', 'Star_rating', 'Price', 'Stock_availability',
                'Quantity', 'Source_File', 'col8', 'col9', 'col10', 'col11',
                'col12', 'col13', 'col14', 'col15', 'col16', 'col17', 'Issue_Date',
                'Return_Date', 'Random_Book_Sum'
            ]
            df_raw = df_raw.iloc[:, :len(correct_columns)]
            df_raw.columns = correct_columns
            df_main = df_raw[['Title', 'Book_category', 'Star_rating', 'Price', 'Quantity', 'Issue_Date']].copy()

            df_main['Price'] = pd.to_numeric(df_main['Price'], errors='coerce')
            df_main['Quantity'] = pd.to_numeric(df_main['Quantity'], errors='coerce')
            df_main['Quantity'].fillna(0, inplace=True)
            df_main['Book_category'].fillna('Unknown', inplace=True)
            df_main['Issue_Date'] = pd.to_datetime(df_main['Issue_Date'], errors='coerce')
            rating_map = {'One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5}
            df_main['Star_rating_numeric'] = df_main['Star_rating'].map(rating_map)
            print("‚úÖ Data ready for analysis.")

            # --- Step 2: Interactive Menu Loop ---
            while True:
                print("\n" + "=====" * 10)
                print("          üìö Book Analysis Dashboard üìö")
                print("=====" * 10)
                print("Please choose an option by typing a number:")
                print("  1. Quick Stats Summary (Recommended First!)")
                print("  2. Full Inventory Analysis (Charts)")
                print("  3. Check for Missing Data")
                print("  4. View Financial Dashboard")
                print("  5. Exit")
                print("=====" * 10)

                choice = input("Enter your choice (1-5): ")

                if choice == '1':
                    show_quick_stats(df_main.copy())
                elif choice == '2':
                    run_full_analysis(df_main.copy())
                elif choice == '3':
                    check_missing_data(df_main.copy())
                elif choice == '4':
                    generate_financial_dashboard(df_main.copy())
                elif choice == '5':
                    print("\nExiting the dashboard. Goodbye!")
                    break
                else:
                    print("\n‚ùå Invalid choice. Please enter a number between 1 and 5.")

                # NEW FEATURE: Pause after an option is selected
                if choice in ['1', '2', '3', '4']:
                    input("\nPress Enter to return to the main menu...")

        except Exception as e:
            print(f"An unexpected error occurred during the process: {e}")