# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13DwmgDu00ULLXwrsWuW9XMfB3MobFU-f
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# --- Data Loading and Robust Cleaning ---
file_name = 'merged_selected_books_data (3).csv'
file_path = None

# Search for the file in the current directory and subdirectories - Added for robust file finding
for root, dirs, files in os.walk('.'):
    if file_name in files:
        file_path = os.path.join(root, file_name)
        break

if file_path is None:
    print(f"‚ùå Error: '{file_name}' not found in the current directory or any subdirectories.")
else:
    try:
        # The CSV has a malformed header. We skip the first row and assign names manually.
        df = pd.read_csv(file_path, header=None, skiprows=1)

        # Manually define the correct column headers for your specific file
        correct_columns = [
            'Title', 'Book_category', 'Star_rating', 'Price', 'Stock_availability',
            'Quantity', 'Source_File', 'col8', 'col9', 'col10', 'col11',
            'col12', 'col13', 'col14', 'col15', 'col16', 'col17', 'Issue_Date',
            'Return_Date', 'Random_Book_Sum'
        ]
        df.columns = correct_columns

        # Select only the columns needed for the full analysis
        df = df[['Title', 'Book_category', 'Star_rating', 'Price', 'Quantity', 'Issue_Date']]

        print("‚úÖ File read successfully. Cleaning data...")

        # --- Clean the Data Types ---
        df['Price'] = pd.to_numeric(df['Price'], errors='coerce')
        df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce')
        df['Quantity'].fillna(0, inplace=True)
        df['Book_category'].fillna('Unknown', inplace=True)
        df['Issue_Date'] = pd.to_datetime(df['Issue_Date'], errors='coerce')

        # Map star ratings from text to numbers for calculations
        rating_map = {'One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5}
        df['Star_rating_numeric'] = df['Star_rating'].map(rating_map)


        print("‚úÖ Data cleaning complete.\n")
        print("---" * 15)

        # --- 1. How many books are in each genre? (Text Summary) ---
        print("\nüìö **Summary: Total Books in Each Genre** üìö")
        book_counts = df['Book_category'].value_counts()
        print(book_counts.to_string())
        print("---" * 15)


        # --- 2. Visualization: Total Book Count by Genre ---
        print("\nüìä Generating chart: Total Books by Genre...")
        plt.style.use('seaborn-v0_8-whitegrid')
        plt.figure(figsize=(12, 10))
        book_counts.sort_values(ascending=False).plot(kind='bar', color=sns.color_palette('viridis', len(book_counts)))
        plt.title('Total Number of Unique Books by Genre', fontsize=16, fontweight='bold')
        plt.xlabel('Book Genre', fontsize=12)
        plt.ylabel('Number of Unique Book Titles', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.gca().invert_yaxis() # Invert the y-axis
        plt.tight_layout()
        plt.show()

        # --- 3. Visualization: Stock Levels by Genre ---
        print("üìä Generating chart: Total Stock by Genre...")
        stock_by_genre = df.groupby('Book_category')['Quantity'].sum().sort_values(ascending=True)
        plt.figure(figsize=(12, 10))
        stock_by_genre.plot(kind='barh', color=sns.color_palette('plasma', len(stock_by_genre)))
        plt.title('Total Stock Quantity by Genre', fontsize=16, fontweight='bold')
        plt.xlabel('Total Stock Quantity', fontsize=12)
        plt.ylabel('Book Genre', fontsize=12)
        plt.tight_layout()
        plt.show()

        # --- 4. Visualization: Issued Books by Genre ---
        print("üìä Generating chart: Issued Books by Genre...")
        df_issued = df.dropna(subset=['Issue_Date'])
        issued_by_genre = df_issued['Book_category'].value_counts(ascending=True)

        if not issued_by_genre.empty:
            plt.figure(figsize=(12, 10))
            issued_by_genre.plot(kind='barh', color=sns.color_palette('magma', len(issued_by_genre)))
            plt.title('Number of Issued Books by Genre', fontsize=16, fontweight='bold')
            plt.xlabel('Number of Books Issued', fontsize=12)
            plt.ylabel('Book Genre', fontsize=12)
            plt.tight_layout()
            plt.show()
        else:
            print("‚ö†Ô∏è Could not generate 'Issued Books' chart as no valid issue dates were found.")

        # --- 5. Analysis: Average Price per Genre ---
        print("\nüí∞ Generating chart: Average Price per Genre...")
        avg_price_genre = df.groupby('Book_category')['Price'].mean().sort_values(ascending=True)
        plt.figure(figsize=(12, 8))
        avg_price_genre.plot(kind='barh', color=sns.color_palette('crest', len(avg_price_genre)))
        plt.title('Average Book Price by Genre', fontsize=16, fontweight='bold')
        plt.xlabel('Average Price ($)', fontsize=12)
        plt.ylabel('Book Genre', fontsize=12)
        plt.tight_layout()
        plt.show()

        # --- 6. Analysis: Top 10 Most Expensive Books ---
        print("\nüèÜ **Top 10 Most Expensive Books** üèÜ")
        top_10_expensive = df.sort_values(by='Price', ascending=False).head(10)
        print(top_10_expensive[['Title', 'Book_category', 'Price']].to_string(index=False))
        print("---" * 15)


        # --- 7. Analysis: Distribution of Star Ratings ---
        print("\n‚≠ê Generating chart: Distribution of Star Ratings...")
        rating_dist = df['Star_rating'].value_counts()
        plt.figure(figsize=(10, 8))
        plt.pie(rating_dist, labels=rating_dist.index, autopct='%1.1f%%', startangle=140,
                colors=sns.color_palette('YlOrRd', len(rating_dist)))
        plt.title('Overall Distribution of Star Ratings', fontsize=16, fontweight='bold')
        plt.ylabel('') # Hides the 'Star_rating' label on the side
        plt.show()

        # --- 8. Analysis: Average Star Rating per Genre ---
        print("\nüåü Generating chart: Average Star Rating per Genre...")
        avg_rating_genre = df.groupby('Book_category')['Star_rating_numeric'].mean().sort_values(ascending=False)
        plt.figure(figsize=(12, 8))
        avg_rating_genre.plot(kind='bar', color=sns.color_palette('coolwarm', len(avg_rating_genre)))
        plt.title('Average Star Rating by Genre', fontsize=16, fontweight='bold')
        plt.xlabel('Book Genre', fontsize=12)
        plt.ylabel('Average Rating (out of 5)', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        plt.show()

        # --- 9. Analysis: Issued-to-Stock Ratio ---
        print("\nüìà Generating chart: Issued-to-Stock Ratio (Popularity)...")
        # Recalculate for this specific analysis
        stock_by_genre = df.groupby('Book_category')['Quantity'].sum()
        issued_count_by_genre = df[df['Issue_Date'].notna()].groupby('Book_category').size()

        # Combine into a new dataframe for ratio calculation
        ratio_df = pd.DataFrame({'Stock': stock_by_genre, 'Issued': issued_count_by_genre}).fillna(0)

        # Avoid division by zero
        ratio_df['Ratio'] = ratio_df.apply(lambda row: row['Issued'] / row['Stock'] if row['Stock'] > 0 else 0, axis=1)

        ratio_df = ratio_df.sort_values('Ratio', ascending=True)

        plt.figure(figsize=(12, 8))
        ratio_df['Ratio'].plot(kind='barh', color=sns.color_palette('viridis', len(ratio_df))) # Changed color palette here
        plt.title('Issued-to-Stock Ratio by Genre (Demand)', fontsize=16, fontweight='bold')
        plt.xlabel('Ratio (Issued Books / Total Stock)', fontsize=12)
        plt.ylabel('Book Genre', fontsize=12)
        plt.tight_layout()
        plt.show()


    except FileNotFoundError:
        print("‚ùå Error: 'merged_selected_books_data (3).csv' not found.")
        print("Please make sure you have uploaded the file and the filename is spelled correctly.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")